#include <cmath>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <math.h> 
#include <Windows.h>
#include <string>
using namespace std;

// NOMAD handles the input and output of this code. Hence do NOT print out any thing in this code.


int main ( int argc , char ** argv ) {

  // c1 = car_sensitivityFactor - truck_sensitivityFactor <= 0
  // c2 = car_minHeadway - truck_minHeadway <= 0
  double f = 1e20, c1 = 1e20, c2 = 1e20;
  int wait_time;

  // The decision variables for cars
  double x[8];

  // if ( argc != 3)
  //   cout << "Usage: " << argv[0] << "config_file.txt thread\n";
  
  // else{
  if ( argc >= 2 ) {

    // The configuration file
    ifstream in ( argv[1] );
    string thread ( "thread1" );

    // the parameter file and the obj value file
    string para_file ("E:\\sim_opt_com\\" + thread + "_sim_paras.txt");
    string val_file ("E:\\sim_opt_com\\" + thread + "_sim_val.txt");

    // ===========================================================
    // Fetch the parameters generated by NOMAD
    // set the value for the variables
    for ( int i = 0 ; i < 8 ; i++ ) {
      in >> x[i];
    }
    
    if ( in.fail() )
    {
      f = 1e20;
      c1 = 1e20;
      c2 = 1e20;
    }
    else 
    {
      // ===========================================================
      // First check if the constraints are satisfied, if not, then no need to simulates
      c1 = x[2] - x[3];
      c2 = x[6] - x[7];

      if (c1 <= 0 && c2 <= 0)
      {
        // ===========================================================================================
        // The constraint is satisfied, then call AIMSUN blackbox simulator
        // ===========================================================================================

        // Write parameters to files which will trigger AIMSUN to simulate
        ofstream parasfile;
        parasfile.open(para_file.c_str());
        if (parasfile.is_open()){
          // Follow the format of setting the parameters
          // mean, std, min, max
          parasfile << "car_speedAcceptance," << (x[0]/100) << ",0.1,0.85,1.15\n" ;
          parasfile << "truck_maxAccel," << (x[1]/100) << ",0.4,0.6,1.8\n" ;
          parasfile << "car_sensitivityFactor," << (x[2]/100) << ",0.25,0.75,1.5" << '\n';
          parasfile << "truck_sensitivityFactor," << (x[3]/100) << ",0.25,0.75,1.5" << '\n';
          parasfile << "car_reactionTime," << (x[4]*0.2) << ",1.2,1.6,1\n" ;
          parasfile << "truck_reactionTime," << (x[5]*0.2) << ",1.3,1.7,1\n" ;
          parasfile << "car_minHeadway," << (x[6]/10) << ",0.5,1.0,2.5" << '\n';
          parasfile << "truck_minHeadway," << (x[7]/10) << ",0.5,1.0,2.5" << '\n';
        }
        else
          perror("unable to open E:\\sim_opt_com\\thread#_sim_paras.txt");

        parasfile.close();
        
        // ===========================================================================================
        // Now wait and read simulated value from AIMSUN
        ifstream simvalfile;
        simvalfile.open(val_file.c_str());

        wait_time = 0;
        // printf("waiting for simulation result...\n");
        while (!simvalfile.is_open())
        {
          //wait and open again
          Sleep(1000);  // sleep 1 second
          wait_time += 1;
          if (wait_time >= 600) // simulation takes a long time; update every 600 s
          {
            //printf("waiting for simulation result...\n");
            wait_time = 0;
          }

          simvalfile.open(val_file.c_str());
        }
        simvalfile >> f;
        simvalfile.close();

        // remove the file, this will be created again when python script gets the simulation result
        if( remove(val_file.c_str()) != 0)
            perror("Error deleting file E:\\sim_opt_com\\thread#_sim_val.txt");

      }
      else
      {
        f = 1e21;
      }
    }
    in.close();
  }

  // output the simulation objective, which NOMAD will evaluate and generate a new set of parameters
  cout << f << " " << c1 << " " << c2 << endl;

  return 0;
}


